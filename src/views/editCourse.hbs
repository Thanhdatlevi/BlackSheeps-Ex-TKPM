<div class="max-w-5xl mx-auto mt-10 p-6 bg-white shadow-lg rounded-lg">
    <h1 class="text-2xl font-bold mb-6">Quản Lý Khóa Học</h1>

    <!-- Danh sách các khóa học -->
    <div class="mb-8">
        <h3 class="text-xl font-semibold mb-4">Danh sách Khóa Học</h3>
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="py-2 px-4 border-b text-left">Mã Khóa Học</th>
                        <th class="py-2 px-4 border-b text-left">Tên Khóa Học</th>
                        <th class="py-2 px-4 border-b text-left">Khoa Phụ Trách</th>
                        <th class="py-2 px-4 border-b text-left">Trạng thái</th>
                        <th class="py-2 px-4 border-b text-center">Thao Tác</th>
                    </tr>
                </thead>
                <tbody id="courseTableBody">
                    <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Form chỉnh sửa khóa học -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex justify-center items-center">
        <div class="bg-white rounded-lg p-6 shadow-lg w-96">
            <h3 class="text-xl font-semibold mb-4">Chỉnh sửa Khóa Học</h3>
            <form id="editCourseForm">
                <input type="hidden" id="editCourseId">
                <div class="mb-4">
                    <label for="editCourseName" class="block text-sm font-medium mb-1">Tên Khóa Học:</label>
                    <input type="text" id="editCourseName" name="courseName" required class="p-2 border rounded w-full">
                </div>
                <div class="mb-4">
                    <label for="editDescription" class="block text-sm font-medium mb-1">Mô Tả:</label>
                    <textarea id="editDescription" name="description" required class="p-2 border rounded w-full"></textarea>
                </div>
                <div class="mb-4">
                    <label for="editDepartment" class="block text-sm font-medium mb-1">Khoa Phụ Trách:</label>
                    <select id="editDepartment" name="department" required class="p-2 border rounded w-full">
                        <!-- Danh sách khoa phụ trách sẽ được thêm vào đây -->
                    </select>
                </div>
                <div class="mb-4">
                    <label for="editCredit" class="block text-sm font-medium mb-1">Số Tín Chỉ:</label>
                    <textarea id="editCredit" name="credit" required class="p-2 border rounded w-full"></textarea>  
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="button" onclick="closeEditModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded">
                        Hủy
                    </button>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        Lưu
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function formatDateWithTimezone(date) {
        const offset = -date.getTimezoneOffset(); // Lấy timezone offset (phút)
        const sign = offset >= 0 ? '+' : '-'; // Dấu (+/-) cho timezone
        const hours = String(Math.floor(Math.abs(offset) / 60)).padStart(2, '0'); // Giờ
        const minutes = String(Math.abs(offset) % 60).padStart(2, '0'); // Phút

        // Định dạng ngày giờ: YYYY-MM-DD HH:mm:ss.SSS±TZD
        return date.toISOString().replace('T', ' ').replace('Z', '') + `${sign}${hours}:${minutes}`;
}
    let courses = [];
    let departments = [];

    // Tải danh sách khóa học và khoa phụ trách khi trang được load
    document.addEventListener('DOMContentLoaded', function () {
        loadCourses();
        loadDepartments();

        // Xử lý form chỉnh sửa khóa học
        document.getElementById('editCourseForm').addEventListener('submit', function (e) {
            e.preventDefault();
            updateCourse();
        });
    });

    // Tải danh sách khóa học từ API
    async function loadCourses() {
        try {
            const response = await fetch('/getAllCourses');
            const data = await response.json();
            if (data.success && data.courses) {
                courses = data.courses;
                
                renderCourseTable();
            } else {
                console.error('Failed to load courses:', data.message);
            }
        } catch (error) {
            console.error('Error loading courses:', error);
        }
    }

    // Tải danh sách khoa phụ trách từ API
    async function loadDepartments() {
        try {
            const response = await fetch('/faculties');
            const data = await response.json();
            if (data.success && data.faculties) {
                departments = data.faculties;
                
                renderDepartmentOptions();
            } else {
                console.error('Failed to load departments:', data.message);
            }
        } catch (error) {
            console.error('Error loading departments:', error);
        }
    }

    // Hiển thị danh sách khóa học trong bảng
    function renderCourseTable() {
        console.log("renderCourseTable called");
        const tableBody = document.getElementById('courseTableBody');
        tableBody.innerHTML = '';
        courses.forEach((course, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="py-2 px-4 border-b">${course.course_id}</td>
                <td class="py-2 px-4 border-b">${course.course_name}</td>
                <td class="py-2 px-4 border-b">${course.faculty_name}</td>
                <td class="py-2 px-4 border-b">${course.status}</td>
                <td class="py-2 px-4 border-b text-center">
                    <button onclick="openEditModal('${course.course_id}')" 
                            class="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded mr-2">
                        Sửa
                    </button>
                    <button onclick="deleteCourse('${course.course_id}', '${course.time_create}')" 
                            class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded">
                        Xóa
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    // Hiển thị danh sách khoa phụ trách trong dropdown
    function renderDepartmentOptions() {
        const departmentSelect = document.getElementById('editDepartment');
        departmentSelect.innerHTML = '';
        departments.forEach(department => {
            const option = document.createElement('option');
            option.value = department.faculty_id;
            option.textContent = department.faculty_name;
            departmentSelect.appendChild(option);
        });
    }

    // Mở modal chỉnh sửa khóa học
    async function openEditModal(courseId) {
    try {
        // Gửi yêu cầu kiểm tra xem khóa học có tồn tại trong bảng class không
        const response = await fetch(`/isCourseNameExists?courseId=${courseId}`);

        const data = await response.json();

        // Tìm khóa học trong danh sách courses
        const course = courses.find(c => c.course_id === courseId);
        if (course) {
            // Điền thông tin khóa học vào modal
            document.getElementById('editCourseId').value = course.course_id;
            document.getElementById('editCourseName').value = course.course_name;
            document.getElementById('editDescription').value = course.description;
            document.getElementById('editDepartment').value = course.faculty;
            document.getElementById('editCredit').value = course.credit;

            // Kiểm tra kết quả từ API
            if (data.exists) {
                // Nếu khóa học tồn tại trong bảng class, ẩn phần sửa tín chỉ
                document.getElementById('editCredit').parentElement.style.display = 'none';
            } else {
                // Nếu không tồn tại, hiển thị phần sửa tín chỉ
                document.getElementById('editCredit').parentElement.style.display = 'block';
            }

            // Hiển thị modal
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }
    } catch (error) {
        console.error('Error checking course existence in class:', error);
        alert('Có lỗi xảy ra khi kiểm tra khóa học!');
    }
}

    // Đóng modal chỉnh sửa
    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
        document.getElementById('editModal').classList.remove('flex');
    }

    // Cập nhật khóa học
    async function updateCourse() {
        const id = document.getElementById('editCourseId').value;
        const courseName = document.getElementById('editCourseName').value.trim();
        const description = document.getElementById('editDescription').value.trim();
        const faculty = document.getElementById('editDepartment').value;
        const credit = document.getElementById('editCredit').value.trim();
        const validCredits = parseInt(document.getElementById('editCredit').value,10);
        if (isNaN(validCredits) || validCredits < 2) {
            alert('Số tín chỉ phải >= 2');
            return;
        }
        if (!courseName || !description || !faculty) {
            alert('Vui lòng điền đầy đủ thông tin!');
            return;
        }

        try {
            const response = await fetch(`/updateCourse`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id ,courseName, description, faculty, credit })
            });
            const data = await response.json();
            if (data.success) {
                await loadCourses();
                const index = courses.findIndex(c => c.course_id == id);
                if (index !== -1) {
                    courses[index] = { ...courses[index], courseName, description, faculty };
                }
                
                renderCourseTable();
                closeEditModal();
                alert('Cập nhật khóa học thành công!');
            } else {
                alert('Lỗi: ' + (data.message || 'Không thể cập nhật khóa học'));
            }
        } catch (error) {
            console.error('Error updating course:', error);
        }
    }

    // Xóa khóa học
    async function deleteCourse(courseId, timeCreate) {
        const reponse = await fetch(`/isCourseNameExists?courseId=${courseId}`);
        const data = await reponse.json();
        const createdTime = new Date(timeCreate);
        const currentTime = new Date();
        currentTime.setHours(currentTime.getHours() - 7); // Giờ Việt Nam UTC+7
        const diffMinutes = (currentTime - createdTime) / (1000 * 60);
        if (diffMinutes <= 30) {
            if (!data.exists) {
                if (confirm('Bạn có chắc chắn muốn xóa khóa học này?')) {
                try {
                    const response = await fetch(`/deleteCourse`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ courseId: courseId })
            });
                    const data = await response.json();
                    if (data.success) {
                        await loadCourses();
                        courses = courses.filter(c => c.course_id != courseId);
                        renderCourseTable();
                        alert('Xóa khóa học thành công!');
                    } else {
                        alert('Lỗi: ' + (data.message || 'Không thể xóa khóa học'));
                    }
                } catch (error) {
                    console.error('Error deleting course:', error);
                }
            }
            }
            else {
                if (confirm('Khóa học đã được đăng ký lớp. Bạn có muốn chuyển trạng thái sang Deactivate không?.')) {
                try {
                    const response = await fetch(`/updateCourseStatus`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ courseId: courseId,
                    status: 'Deactivated' })
            });
                    const data = await response.json();
                    if (data.success) {
                        await loadCourses();
                        const index = courses.findIndex(c => c.id == courseId);
                        if (index !== -1) {
                            courses[index].status = 'Deactivated';
                        }
                        renderCourseTable();
                        alert('Khóa học đã được chuyển sang trạng thái Deactivate!');
                    } else {
                        alert('Lỗi: ' + (data.message || 'Không thể chuyển trạng thái khóa học'));
                    }
                } catch (error) {
                    console.error('Error deactivating course:', error);
                }
            }
            }
        } else {
                alert('Khóa học đã được tạo hơn 30 phút. Không thể thực hiện hành động này!');
            }
    }
</script>